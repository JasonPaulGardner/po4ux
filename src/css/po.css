/*
    So you like the style of impress.js demo?
    Or maybe you are just curious how it was done?
    
    You couldn't find a better place to find out!
    
    Welcome to the stylesheet impress.js demo presentation.
    
    Please remember that it is not meant to be a part of impress.js and is
    not required by impress.js.
    I expect that anyone creating a presentation for impress.js would create
    their own set of styles.
    
    But feel free to read through it and learn how to get the most of what
    impress.js provides.
    
    And let me be your guide.
    
    Shall we begin?
*/


/* 
    We start with a good ol' reset.
    That's the one by Eric Meyer http://meyerweb.com/eric/tools/css/reset/ 
    
    You can probably argue if it is needed here, or not, but for sure it
    doesn't do any harm and gives us a fresh start.
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
    display: block;
}
body {
    line-height: 1;
}

blockquote, q {
    quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
    content: '';
    content: none;
}

table {
    border-collapse: collapse;
    border-spacing: 0;
}

/*
    Now here is when interesting things start to appear.
    
    We set up <body> styles with default font and nice gradient in the background.
    And yes, there is a lot of repetition there because of -prefixes but we don't
    want to leave anybody behind.
*/

@font-face {
    font-family: 'SpecialEliteRegular';
    src: url('../fonts/SpecialElite-webfont.eot');
    src: url('../fonts/SpecialElite-webfont.eot?#iefix') format('embedded-opentype'),
         url('../fonts/SpecialElite-webfont.woff') format('woff'),
         url('../fonts/SpecialElite-webfont.ttf') format('truetype'),
         url('../fonts/SpecialElite-webfont.svg#SpecialEliteRegular') format('svg');
    font-weight: normal;
    font-style: normal;

}

@font-face {
    font-family: 'ArmaliteRifleRegular';
    src: url('../fonts/armalite_rifle-webfont.eot');
    src: url('../fonts/armalite_rifle-webfont.eot?#iefix') format('embedded-opentype'),
         url('../fonts/armalite_rifle-webfont.woff') format('woff'),
         url('../fonts/armalite_rifle-webfont.ttf') format('truetype'),
         url('../fonts/armalite_rifle-webfont.svg#ArmaliteRifleRegular') format('svg');
    font-weight: normal;
    font-style: normal;

}


body {
    font-family: "SpecialEliteRegular", sans-serif;
    background: url('../images/leather.jpg') repeat;  
}

/*
    Now let's bring some text styles back ...
*/
b, strong { font-weight: bold }
i, em { font-style: italic }

/*
    ... and give links a nice look.
*/
a {
    color: inherit;
    text-decoration: none;
    padding: 0 0.1em;
    background: rgba(255,255,255,0.5);
    text-shadow: -1px -1px 2px rgba(100,100,100,0.9);
    border-radius: 0.2em;
    
    -webkit-transition: 0.5s;
    -moz-transition:    0.5s;
    -ms-transition:     0.5s;
    -o-transition:      0.5s;
    transition:         0.5s;
}

a:hover,
a:focus {
    background: rgba(255,255,255,1);
    text-shadow: -1px -1px 2px rgba(100,100,100,0.5);
}

/*
    Because the main point behind the impress.js demo is to demo impress.js
    we display a fallback message for users with browsers that don't support
    all the features required by it.
    
    All of the content will be still fully accessible for them, but I want
    them to know that they are missing something - that's what the demo is
    about, isn't it?
    
    And then we hide the message, when support is detected in the browser.
*/

.fallback-message {
    font-family: sans-serif;
    line-height: 1.3;
    
    width: 780px;
    padding: 10px 10px 0;
    margin: 20px auto;

    border: 1px solid #E4C652;
    border-radius: 10px;
    background: #EEDC94;
}

.fallback-message p {
    margin-bottom: 10px;
}

.impress-supported .fallback-message {
    display: none;
}

/*
    Now let's style the presentation steps.
    
    We start with basics to make sure it displays correctly in everywhere ...
*/

.step {
    position: relative;
    padding: 5em;
    margin: 2em 2em;
    width: auto;
    width: 70em;
    height: 50em;

    -webkit-box-sizing: border-box;
    -moz-box-sizing:    border-box;
    -ms-box-sizing:     border-box;
    -o-box-sizing:      border-box;
    box-sizing:         border-box;
    line-height: 1.5;
    background:  url('../images/paper.jpg') repeat;
    -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.8);
    -moz-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.8);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.8);
    -webkit-border-radius: 6px; /* Safari 3-4, iOS 1-3.2, Android =1.6 */
    border-radius: 6px; /* Opera 10.5, IE9+, Safari 5, Chrome, Firefox 4+, iOS 4, Android 2.1+ */
    -moz-background-clip: padding; 
    -webkit-background-clip: padding-box; 
    background-clip: padding-box;
}

/*
    ... and we enhance the styles for impress.js.
    
    Basically we remove the margin and make inactive steps a little bit transparent.
*/
.impress-enabled .step {
    margin: 0;
    opacity: 0.3;

    -webkit-transition: opacity 1s;
    -moz-transition:    opacity 1s;
    -ms-transition:     opacity 1s;
    -o-transition:      opacity 1s;
    transition:         opacity 1s;
}

.impress-enabled .step.active { opacity: 1 }

/*
    These 'slide' step styles were heavily inspired by HTML5 Slides:
    http://html5slides.googlecode.com/svn/trunk/styles.css
    
    ;)
    
    They cover everything what you see on first three steps of the demo.
*/

h1 {
  
  font-size: 2.2em;
  color: #000;
}
h2 {
  font-size: 2em;
  color: #c00;
  border-bottom-color: #ccc;
}
h3 {
  font-size: 1.75em;
  color: #3D3D3D;
}
pre {
  border-color: #ccc;
}
code {
  color: #888;
}
dl dt {
  font-size: 1.5em;
  font-style: normal;
  font-weight: bold;
  color: #3D3D3D;
}

dl dd {
   margin-bottom: 1.75em;
   
}

#iwanttoknowmore {
  font-size: 1em;
  margin-top:1em;
}

img{
  margin: 1em;
  border: 5px solid white;
}

img.center{
   display:block; /*images must be set to block in order use auto margins*/
   margin:0 auto; /*centers images in most browsers*/
   text-align:center; /*centers images in older browsers*/
}

img#pleasewait {
  margin-top:6em;
}

img.right{
  float: right;
}

img.left{
  float: left;
}

ul{
  margin-top:1em;
  margin-bottom:1em;
}

p{
  margin-bottom:1em;
}

img.rotate{
  -webkit-transform: matrix(0.985,0.174,-0.174,0.985,0,0);
-moz-transform: matrix(0.985,0.174,-0.174,0.985,0px,0px);
-ms-transform: matrix(0.985,0.174,-0.174,0.985,0,0);
-o-transform: matrix(0.985,0.174,-0.174,0.985,0,0);
transform: matrix(0.985,0.174,-0.174,0.985,0,0);
}

img.shadow{
  -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.8);
  -moz-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.8);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.8);
}

dt.listitem {
     padding-left: 40px;
     padding-top: 3px;
     padding-bottom: 3px;
     margin: 3px 0;
}

code{
  margin-left:15em; 
  margin-bottom:1em;
  background-color:black;
  color:white;
  display:inline-block;
}

.cite {
  font-size: 0.6em;
}
.refs {
  position:absolute; 
  bottom:1em;
}
.refs>p{
  margin-bottom:0em;
} 

ul.nolist {
    list-style: none;
}

/*
    And now we start to style each step separately.
    
    I agree that this may be not the most efficient, object-oriented and
    scalable way of styling, but most of steps have quite a custom look
    and typography tricks here and there, so they had to be styles separately.

    First is the title step with a big <h1> (no room for padding) and some
    3D positioning along Z axis.
*/

#start h1 {
  margin-top: 3.2em;
  font-family: "ArmaliteRifleRegular", sans-serif;
  text-align: center;
  -webkit-transform: matrix(0.994,-0.106,0.106,0.994,0,0);
  -moz-transform: matrix(0.994,-0.106,0.106,0.994,0px,0px);
  -ms-transform: matrix(0.994,-0.106,0.106,0.994,0,0);
  -o-transform: matrix(0.994,-0.106,0.106,0.994,0,0);
  transform: matrix(0.994,-0.106,0.106,0.994,0,0);

  font-size: 4em;

}

#start h2 {
  border-bottom-color: transparent;
  text-align: center;
  -webkit-transform: matrix(0.994,-0.106,0.106,0.994,0,0);
  -moz-transform: matrix(0.994,-0.106,0.106,0.994,0px,0px);
  -ms-transform: matrix(0.994,-0.106,0.106,0.994,0,0);
  -o-transform: matrix(0.994,-0.106,0.106,0.994,0,0);
  transform: matrix(0.994,-0.106,0.106,0.994,0,0);
  font-size:3em;
}


/*
    And as the last thing there is a workaround for quite strange bug.
    It happens a lot in Chrome. I don't remember if I've seen it in Firefox.
    
    Sometimes the element positioned in 3D (especially when it's moved back
    along Z axis) is not clickable, because it falls 'behind' the <body>
    element.
    
    To prevent this, I decided to make <body> non clickable by setting 
    pointer-events property to `none` value.
    Value if this property is inherited, so to make everything else clickable
    I bring it back on the #impress element.
    
    If you want to know more about `pointer-events` here are some docs:
    https://developer.mozilla.org/en/CSS/pointer-events
    
    There is one very important thing to notice about this workaround - it makes
    everything 'unclickable' except what's in #impress element.
    
    So use it wisely ... or don't use at all.
*/
.impress-enabled          { pointer-events: none }
.impress-enabled #impress { pointer-events: auto }

